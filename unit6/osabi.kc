
void enable_syscalls() {
	*(unsigned char *)$D02F = $47;
	*(unsigned char *)$D02F = $53;
}

void process_info()
{
	enable_syscalls();
	*(unsigned char *)$D643 = $00;
	asm { nop }
}

void end_program()
{
	enable_syscalls();
	*(unsigned char *)$D644 = $00;
	asm { nop }
}

void yield()
{  
	enable_syscalls();
	*(unsigned char *)$D645 = $00;
	asm { nop }
}

void showpid()
{
	enable_syscalls();
	*(unsigned char *)$D646 = $00;
	asm { nop }
}

unsigned char fork()
{
	enable_syscalls();
	*(unsigned char *)$D647 = $00;
	asm { nop }
  return *(unsigned char *)$0300;
}

void exec(char *program_name)
{
	// XXX - Copy the program_name argument to the transfer area at $0300	
	unsigned short i = 0;
  unsigned short Max_name_len = 17;
	char* tr_area = (char*)$0300; 
	
	for (i=0;i<17;i++) tr_area[i] = program_name[i];
	
  //i = 0;
  //do {
  	//tr_area[i] = program_name[i];
 // 	i++;
//  }while (i < Max_name_len && program_name[i] != 0);

	enable_syscalls();
	*(unsigned char *)$D648 = $00;
	asm { nop }
}



//Message structure: 16 bytes in total
struct ipc_message {

	unsigned char from;
	unsigned char to; 
	unsigned char priority;
	unsigned char sequence;
	unsigned char[12] message;
};


struct ipc_message[1] ipc_buffer;

struct ipc_message * ipc_read() 
{
	enable_syscalls();
	* (unsigned char*) $D649 = $00;
	asm{nop}
	
	
	//copy returned structure in to return buffer
	unsigned char *a = (unsigned char* ) ipc_buffer;
	unsigned char *b = (unsigned char *) $0300;
	
	for (unsigned char i = 0; i< 16; i++) a[i]= b[i];
	
	//Return address of return buffer
	return ipc_buffer;
}


void ipc_send(unsigned char to, 
							unsigned char priority, 
							unsigned char sequence_number, 
							unsigned char *message)
{
	ipc_buffer[0].from = $00;
	ipc_buffer[0].to = to;
	ipc_buffer[0].priority = priority; 
	ipc_buffer[0].sequence = sequence_number;


	//copy received message in to ipc_buffer message
	unsigned char *b = (unsigned char* ) message;
	unsigned char *a = (unsigned char *) ipc_buffer[0].message;	

	for (unsigned char i = 0; i< 12; i++) a[i]= b[i];

	//copy returned structure in to return buffer
	b = (unsigned char* ) ipc_buffer;
	a = (unsigned char *) $0300;
	
	for (unsigned char i = 0; i< 16; i++) a[i]= b[i];




	enable_syscalls();
	*(unsigned char *)$D64A = $00;
	asm { nop }	
}




